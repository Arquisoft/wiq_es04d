openapi: 3.0.0
info:
  title: Gatewayservice API
  description: API available to the client for accessing the services 
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Development server
  - url: http://20.77.40.187:8000
    description: Production server
paths:
  /adduser:
    post:
      summary: Add a new user to the database.
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User ID.
                  example: student
                password:
                  type: string
                  description: User password.
                  example: pass
      responses:
        '200':
          description: User added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: User ID
                  password:
                    type: string
                    description: Hashed password
                    example: $2b$10$ZKdNYLWFQxzt5Rei/YTc/OsZNi12YiWz30JeUFHNdAt7MyfmkTuvC
                  _id:
                    type: string
                    description: Identification
                    example: 65f756db3fa22d227a4b7c7d
                  createdAt:
                    type: string
                    description: Creation date.
                    example: '2024-03-17T20:47:23.935Z'
                  ___v:
                    type: integer
                    example: '0'                                        
        '400':
          description: Failed to add user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error information.
                    example: getaddrinfo EAI_AGAIN mongodb
  /health:
    get:
      summary: Check the health status of the service.
      operationId: checkHealth
      responses:
        '200':
          description: Service is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Health status.
                    example: OK
  /login:
    post:
      summary: Log in to the system.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User ID.
                  example: student
                password:
                  type: string
                  description: User password.
                  example: pass
      responses:
        '200':
          description: Login successful. Returns user token, username, and creation date.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: User token.
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NWY3NTZkYjNmYTIyZDIyN2E0YjdjN2QiLCJpYXQiOjE3MTA3MDg3NDUsImV4cCI6MTcxMDcxMjM0NX0.VMG_5DOyQ4GYlJQRcu1I6ICG1IGzuo2Xuei093ONHxw
                  username:
                    type: string
                    description: Username.
                    example: student
                  createdAt:
                    type: string
                    description: Creation date.
                    example: '2024-03-17T20:47:23.935Z'
        '401':
          description: Invalid credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Shows the error info..
                    example: Invalid credentials
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error information.
                    example: Internal Server Error
  /getquestions:
    get:
      summary: Get random questions.
      operationId: getQuestions
      responses:
        '200':
          description: Returns random questions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  questions:
                    type: array
                    items:
                      type: object
                      properties:
                        question:
                          type: string
                          description: The question itself.
                        answers:
                          type: array
                          items:
                            type: object
                            properties:
                              answer:
                                type: string
                                description: The answer to the question.
                              correct:
                                type: boolean
                                description: Indicates if the answer is correct.
                        questionCategory:
                          type: string
                          description: The category of the question.
                example:
                  questions:
                    - question: "¿Cuál es la capital de Francia?"
                      answers:
                        - answer: "París"
                          correct: true
                        - answer: "Londres"
                          correct: false
                        - answer: "Madrid"
                          correct: false
                        - answer: "Berlín"
                          correct: false
                      questionCategory: "Geografía"
        '500':
          description: Error getting the questions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message.
                example:
                  error: "Error getting the questions occurred"
  /createquestion:
    post:
      summary: Create a new question.
      operationId: createQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The question itself.
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      answer:
                        type: string
                        description: The answer to the question.
                      correct:
                        type: boolean
                        description: Indicates if the answer is correct.
                questionCategory:
                  type: string
                  description: The category of the question.
      responses:
        '201':
          description: Question created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    description: The ID of the created question.
                    example: "65f756db3fa22d227a4b7c7d"
                  question:
                    type: string
                    description: The question itself.
                    example: "¿Cuál es la capital de Francia?"
                  answers:
                    type: array
                    items:
                      type: object
                      properties:
                        answer:
                          type: string
                          description: The answer to the question.
                        correct:
                          type: boolean
                          description: Indicates if the answer is correct.
                  questionCategory:
                    type: string
                    description: The category of the question.
        '400':
          description: Bad request. Invalid input data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error information.
                    example: Invalid input data.
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error information.
                    example: Internal Server Error
  /updatequestion/{id}:
    put:
      summary: Update a question by ID
      operationId: updateQuestionById
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the question to update
          schema:
            type: string
          example: "605cf8a59c73cc0022563989"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: The text of the question.
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      answer:
                        type: string
                        description: The text of the answer.
                      correct:
                        type: boolean
                        description: Indicates if the answer is correct.
                questionCategory:
                  type: string
                  description: The category of the question.
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Update status
                    example: OK
        '400':
          description: Bad request, invalid data provided
        '404':
          description: Question not found
        '500':
          description: Internal server error
  /deletequestion/{id}:
    delete:
      summary: Delete a question by ID
      operationId: deleteQuestionById
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the question to delete
          schema:
            type: string
          example: "605cf8a59c73cc0022563989"
      responses:
        '200':
          description: Question deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Deletion status
                    example: OK
        '404':
          description: Question not found
        '500':
          description: Internal server error
  /gethistory/{user}:
    get:
      summary: Get a history by user name
      operationId: getHistoryByUser
      parameters:
        - in: path
          name: user
          required: true
          description: name of the user
          schema:
            type: string
            example: "username"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                properties:
                  username:
                    type: string
                    example: "user"
                  played:
                    type: number
                    example: 1
                  playedAnswers:
                    type: number
                    example: 5
                  correctAnswers:
                    type: number
                    example: 2
                  incorrectAnswers:
                    type: number
                    example: 3
        '404':
          description: User not found
        '500':
          description: Internal server error
